name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Profile detection and setup
  setup:
    name: Setup Project Profile
    runs-on: ubuntu-latest
    outputs:
      profile: ${{ steps.detect.outputs.profile }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Detect project profile
        id: detect
        run: |
          if [ -f ".project-profile" ]; then
            PROFILE=$(grep "^PROFILE=" .project-profile | cut -d'=' -f2 | tr -d ' ')
            echo "profile=$PROFILE" >> $GITHUB_OUTPUT
          else
            echo "profile=universal" >> $GITHUB_OUTPUT
          fi
          echo "Detected profile: $PROFILE"

      - name: Initialize project profile
        run: |
          ./scripts/profile-manager.sh init ${{ steps.detect.outputs.profile }}

  # Security checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for GitLeaks

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Initialize project profile
        run: |
          ./scripts/profile-manager.sh init ${{ needs.setup.outputs.profile }}

      - name: Run security checks
        run: make ci-security

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            trufflehog-report.json
            gitleaks-report.json

  # Code quality checks
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Initialize project profile
        run: |
          ./scripts/profile-manager.sh init ${{ needs.setup.outputs.profile }}

      - name: Run code formatting check
        run: make format

      - name: Run linting
        run: make lint

      - name: Run quality checks
        run: make ci-quality

      - name: Upload quality reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-reports
          path: |
            flake8-report.txt
            eslint-report.txt
            golangci-lint-report.txt

  # Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        node-version: ['16', '18', '20']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Initialize project profile
        run: |
          ./scripts/profile-manager.sh init ${{ needs.setup.outputs.profile }}

      - name: Run tests
        run: make ci-test
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports-${{ matrix.python-version }}-${{ matrix.node-version }}
          path: |
            htmlcov/
            coverage.xml
            test-results/

  # All checks combined
  check:
    name: All Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Initialize project profile
        run: |
          ./scripts/profile-manager.sh init ${{ needs.setup.outputs.profile }}

      - name: Run all checks
        run: make check

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [setup, security, quality, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Initialize project profile
        run: |
          ./scripts/profile-manager.sh init ${{ needs.setup.outputs.profile }}

      - name: Build project
        run: |
          make docker-build
          make docs

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            build/
            docs/

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # Example: kubectl apply -f k8s/staging/
          # Example: aws s3 sync dist/ s3://your-staging-bucket/

  # CodeQL security analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2 